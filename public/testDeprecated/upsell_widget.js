;var upsell_widget_plugin = function( $ ) {
	
	var changed = false;

	function initUpSellPage(pageData, self) {
		var restoreDefaultBeforeCloseThenClose = (function(self) {
			var defaultBeforeClose = self.dialog("option", "beforeClose");
			return function(flag) {
				self.dialog("option", "beforeClose", defaultBeforeClose);
				if (flag === undefined) {
					self.dialog("close");
				}
			};
		})(self);
		//Reset changed to false, this flag will change to true if user changed any service quantity
		changed = false;
		var dom = $("<div/>", {id: "sce_upsell_page"});
		
		//Add the two control buttons
		var ctrlBtns = $("<div/>").addClass("header clear").appendTo(dom);
		$("<h3/>", {text: $.i18n.prop("upsell.services")}).addClass("left").appendTo(ctrlBtns);
		$("<input/>", {type: "button", id: "upsell_add_to_config", value: $.i18n.prop("upsell.addToConfig")}).addClass("button slim primary right")
			.click(function() {
//				restoreDefaultBeforeCloseThenClose(0);
				addToConfig(self, pageData.namespace);
			}).appendTo(ctrlBtns);
		$("<input/>", {type: "button", id: "upsell_no_thanks", value: $.i18n.prop("upsell.noThanks")}).addClass("button slim primary right")
			.click(function(){restoreDefaultBeforeCloseThenClose();}).appendTo(ctrlBtns);
		$("<hr/>").appendTo(dom);
		
		//Table headers
		var headers = $("<ul/>").addClass("header clear").appendTo(dom);
		$("<li/>", {text: $.i18n.prop("upsell.serviceType")}).addClass("service").appendTo(headers);
		$("<li/>", {text: $.i18n.prop("widget.bom.listPrice")}).addClass("price").appendTo(headers);
		$("<li/>", {text: $.i18n.prop("widget.bom.quantity")}).addClass("qty").appendTo(headers);
		$("<li/>", {text: $.i18n.prop("widget.choice_point.PartNumber")}).addClass("number").appendTo(headers);
		
		
		//Render the main page
		var details = $("<ul/>").addClass("detail").appendTo(dom);
		addItem(pageData.upsellData, details);
		
//		var submitButton = [{id: 'rack_choices_dialogue_submit', text: 'Ok', click: function () {
//		                        $(this).dialog('close');
//		                    }}];
		
		displayHTMLInModalDialog($.i18n.prop("upsell.buttonLabel"), dom, 600, 'auto', null);
		
		//Add confirm dialog if user choose any service then click the X button on the dialog
		self.dialog("option", "beforeClose", upsellBeforeClose(restoreDefaultBeforeCloseThenClose, self));
	}
	
	function addItem(pageData, container) {
		
		$.each(pageData.list, function(i, item) {
			$("<hr/>").appendTo(container);
			var li = $("<li/>").addClass("clear").appendTo(container);
			var main = $("<div/>").addClass("service").appendTo(li);
		    $("<h6/>", {text: item.title}).appendTo(main);
			$("<p/>", {text: item.description}).appendTo(main);
			$("<input/>", {type: "button", value: $.i18n.prop("upsell.showMeMore")}).addClass("button slim primary showmemore")
				.click(function() {
					window.open(item.hyperlink, '_blank');
				}).appendTo(main);
			
		 	$("<input/>", {value: item.price, readonly: "readonly"}).addClass("price").appendTo(li);;
			$("<input/>", {type: "text", value: 0, disabled: !Boolean(item.price)}).attr('id', 'upsell_quantity_' + item.productNumber).data({preVal: 0, productNumber: item.productNumber}).addClass("qty")
				.change(validateQuantity).appendTo(li);
			$("<input/>", {value: item.productNumber, readonly: "readonly"}).addClass("number").appendTo(li);
			
		});
	}
	
	/**
	 * Make sure the quantity input value is valid, from 0 ~ 999
	 */
	function validateQuantity() {
		var numRegExp = /^(0|[1-9][0-9]{0,2})$/, val = $.trim($(this).val()), me = $(this);
		if (!numRegExp.test(val)) {
			showAlertDialog($.i18n.prop("configWorksheet.textMessage"));
			me.val(me.data("preVal"));
		} else {
			me.data("preVal", me.val());
			changed = true;
		}
	}
	
	/**
	 * Pop up confirm dialog if user chose any service then click the X button on the dialog.
	 * This function will store the previous default beforeClose event generated by framework.showNewDialog() first,
	 * then add our check logic.
	 * @param self
	 * @returns {Function}
	 */
	function upsellBeforeClose(restoreDefaultBeforeCloseThenClose, self) {
		return function() {
			if (changed) {
				$("<div/>").append($("<p/>", {text: $.i18n.prop("upsell.quitWithoutSaving")}))
				.dialog({
					title: $.i18n.prop("Confirm"),
					modal: true,
					buttons: [{
						text: $.i18n.prop("Yes"),
						click: function() {
							$(this).dialog("close");
							restoreDefaultBeforeCloseThenClose();
						}
					},{
						text: $.i18n.prop("No"),
						click: function() {
							$(this).dialog("close");
						}
					},{
						text: $.i18n.prop("upsell.addToConfig"),
						click: function() {
							$(this).dialog("close");
							restoreDefaultBeforeCloseThenClose(0);
							addToConfig(self);
						}
					}]
				});
			} else {
				restoreDefaultBeforeCloseThenClose();
			}
			return false;
		};
	}
	
	/**
	 * Collect all the data and call engine api to update the subconfig, then close the dialog.
	 * @param self
	 */
	function addToConfig(self, namespace) {
		var list = new Array();
		self.find("input.qty").each(function(index, input) {
			if($(input).val() > 0) {
				list.push({productNumber: $(input).data("productNumber"), qty: $(input).val()});
			}
		});
		serverTransaction({method: "add_upsell_to_config", namespace: namespace, list: list});
	}
	
	var methods = {
		init: function (pageData, nav) {
			var self = this;
			initUpSellPage(pageData, self);
			return this;
		},
		get_dialog_title: function (pageData){
			return $.i18n.prop("upsell.title");
		}
	};

	$.fn.upsell_widget = function( method ) {
		if ( methods[method] ) {
			return methods[ method ].apply( this, Array.prototype.slice.call( arguments, 1 ));
		} else if ( typeof method === 'object' || ! method ) {
			return methods.init.apply( this, arguments );
		} else {
			$.error( 'Method ' +  method + ' does not exist on jQuery.upsell_widget' );
		}
    };

};
upsell_widget_plugin.prototype = {};
upsell_widget_plugin(jQuery);